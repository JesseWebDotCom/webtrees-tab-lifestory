<?php
// This file contains generic code to create a tab module

declare(strict_types=1);

namespace JesseWebDotCom\Webtrees\Module\LifeStoryTab;

use Fisharebest\Webtrees\I18N;
use Fisharebest\Webtrees\View;
use Fisharebest\Webtrees\Individual;
use Fisharebest\Webtrees\FlashMessages;
use Psr\Http\Message\ResponseInterface;
use Psr\Http\Message\ServerRequestInterface;
use Fisharebest\Webtrees\Module\AbstractModule;
use Fisharebest\Webtrees\Module\ModuleTabTrait;
use Fisharebest\Webtrees\Module\ModuleCustomTrait;
use Fisharebest\Webtrees\Module\ModuleConfigTrait;
use Fisharebest\Webtrees\Module\ModuleTabInterface;
use Fisharebest\Webtrees\Module\ModuleConfigInterface;
use Fisharebest\Webtrees\Module\ModuleCustomInterface;
use Fisharebest\Localization\Translation;

require 'specific.php';

/**
 * Class LifeStoryTabModule
 */
class LifeStoryTabModule extends AbstractModule implements ModuleTabInterface, ModuleCustomInterface, ModuleConfigInterface
{
    use ModuleTabTrait;
    use ModuleCustomTrait;
    use ModuleConfigTrait;

    /**
     * list of const for module administration
     */
    public const CUSTOM_TITLE       = 'Life Story';
    public const CUSTOM_MODULE      = 'webtrees-tab-lifestory';
    public const CUSTOM_DESCRIPTION = 'A tab showing an autogenerated life story of an individual.';
    public const CUSTOM_AUTHOR      = 'JesseWebDotCom';
    public const CUSTOM_WEBSITE     = 'https://github.com/JesseWebDotCom/' . self::CUSTOM_MODULE . '/';
    public const CUSTOM_VERSION     = '0.0.2';
    public const CUSTOM_LAST        = 'https://github.com/JesseWebDotCom/' .
                                      self::CUSTOM_MODULE. '/releases';


    public function getAdminAction(): ResponseInterface
    {
        $this->layout = 'layouts/administration';

        return $this->viewResponse($this->name() . '::settings', [
            'showparents' => $this->getPreference('showparents', '1'),
            'showsiblings' => $this->getPreference('showsiblings', '1'),
            'showeducation' => $this->getPreference('showeducation', '1'),
            'showmilitary' => $this->getPreference('showmilitary', '1'),
            'showjobs' => $this->getPreference('showjobs', '1'),
            'showresidences' => $this->getPreference('showresidences', '1'),
            'showfamilies' => $this->getPreference('showfamilies', '1'),
            'showtodayage' => $this->getPreference('showtodayage', '1'),            

            'title'        => $this->title()
        ]);
    }

    // Save the user preference.
    public function postAdminAction(ServerRequestInterface $request): ResponseInterface
    {
        $params = (array) $request->getParsedBody();

        if ($params['save'] === '1') {

            // print_r($params);
            $this->setPreference('showparents', $params['showparents'] ?? '0');
            $this->setPreference('showsiblings', $params['showsiblings'] ?? '0');
            $this->setPreference('showeducation', $params['showeducation'] ?? '0');
            $this->setPreference('showmilitary', $params['showmilitary'] ?? '0');
            $this->setPreference('showjobs', $params['showjobs'] ?? '0');
            $this->setPreference('showresidences', $params['showresidences'] ?? '0');
            $this->setPreference('showfamilies', $params['showfamilies'] ?? '0');
            $this->setPreference('showtodayage', $params['showtodayage'] ?? '0');


            $message = I18N::translate('The preferences for the module “%s” have been updated.', $this->title());
            FlashMessages::addMessage($message, 'success');

        }

        return redirect($this->getConfigLink());
    }

    public function title(): string
    {
        return I18N::translate(self::CUSTOM_TITLE);
    }

    public function description(): string
    {
        return I18N::translate(self::CUSTOM_DESCRIPTION);
    }

    public function customModuleAuthorName(): string
    {
        return self::CUSTOM_AUTHOR;
    }

    public function customModuleVersion(): string
    {
        return self::CUSTOM_VERSION;
    }

    public function customModuleLatestVersionUrl(): string
    {
        return self::CUSTOM_LAST;
    }

    public function customModuleSupportUrl(): string
    {
        return self::CUSTOM_WEBSITE;
    }
    
    public function resourcesFolder(): string
    {
        return __DIR__ . DIRECTORY_SEPARATOR . 'resources' . DIRECTORY_SEPARATOR;
    }

    public function defaultTabOrder(): int
    {
        return -1; // ensure tab is first
    }

    public function hasTabContent(Individual $individual): bool
    {
        return true;
    }

    public function isGrayedOut(Individual $individual): bool
    {
        return false;
    }

    public function getCssAction() : ResponseInterface
    {
        return response(
            file_get_contents($this->resourcesFolder() . 'css' . DIRECTORY_SEPARATOR . self::CUSTOM_MODULE . '.css'),
            200,
            ['content-type' => 'text/css']
        );
    }

    /** {@inheritdoc} */
    public function getTabContent(Individual $individual): string
    {
        return view($this->name() . '::' . 'tab',
            [
                'lifestory_content'            => getLifeStory($individual, $this),
            ]);
    }

    /** {@inheritdoc} */
    public function canLoadAjax(): bool
    {
        return false;
    }

    public function __construct()
    {
        // IMPORTANT - the constructor is called on *all* modules, even ones that are disabled.
        // It is also called before the webtrees framework is initialised, and so other components will not yet exist.
    }

    public function boot(): void
    {
        // Here is also a good place to register any views (templates) used by the module.
        // This command allows the module to use: view($this->name() . '::', 'fish')
        // to access the file ./resources/views/fish.phtml
        View::registerNamespace($this->name(), $this->resourcesFolder() . 'views/');
    }
    
    public function customTranslations(string $language): array
    {
        $lang_dir   = $this->resourcesFolder() . 'lang/';
        $extensions = array('mo', 'po');
        foreach ($extensions as &$extension) {
            $file       = $lang_dir . $language . '.' . $extension;
            if (file_exists($file)) {
                return (new Translation($file))->asArray();
            }
        }
        return [];
    }
}
return new LifeStoryTabModule;

